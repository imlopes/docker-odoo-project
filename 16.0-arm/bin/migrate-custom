#!/bin/bash

set -e

wait_postgres.sh

migrate

#DB_NAME='odoodb'
#RUNNING_ENV="dev"

# 000_set_base_url

#ODOO_BASE_URL="http://localhost:8069"

DOMAIN="${ODOO_BASE_URL}"

if [ -n "$DOMAIN" ]; then

  if [ "$( psql -tAc "SELECT 1 FROM pg_database WHERE datname='odoodb'" )" != '1' ]
  then
      echo "Database does not exist, ignoring script"
      exit 0
  fi

  echo "Setting Base URL to domain ${DOMAIN}"
  psql --quiet << EOF

  WITH update_param AS (
    UPDATE ir_config_parameter
    SET value = '${DOMAIN}'
    WHERE key = 'web.base.url'
    RETURNING *
  )
  INSERT INTO ir_config_parameter
  (value, key, create_uid, write_uid, create_date, write_date)
  SELECT '${DOMAIN}', 'web.base.url', 1, 1, now(), now()
  WHERE NOT EXISTS (SELECT * FROM update_param);

  WITH update_param AS (
    UPDATE ir_config_parameter
    SET value = 'True'
    WHERE key = 'web.base.url.freeze'
    RETURNING *
  )
  INSERT INTO ir_config_parameter
  (value, key, create_uid, write_uid, create_date, write_date)
  SELECT 'True', 'web.base.url.freeze', 1, 1, now(), now()
  WHERE NOT EXISTS (SELECT * FROM update_param);

EOF
fi

# 001_set_report_url
#ODOO_REPORT_URL="http://odoo:8069"
DOMAIN="${ODOO_REPORT_URL}"

if [ -n "$DOMAIN" ]; then

  if [ "$( psql -tAc "SELECT 1 FROM pg_database WHERE datname='odoodb'" )" != '1' ]
  then
      echo "Database does not exist, ignoring script"
      exit 0
  fi

  echo "Setting Report URL to domain ${DOMAIN}"
  psql --quiet << EOF

  WITH update_param AS (
    UPDATE ir_config_parameter
    SET value = '${DOMAIN}'
    WHERE key = 'report.url'
    RETURNING *
  )
  INSERT INTO ir_config_parameter
  (value, key, create_uid, write_uid, create_date, write_date)
  SELECT '${DOMAIN}', 'report.url', 1, 1, now(), now()
  WHERE NOT EXISTS (SELECT * FROM update_param);

EOF
fi

# 000_dev_set_db_storage
if [ "$RUNNING_ENV" = "dev" ] ; then

    if [ "$( psql -tAc "SELECT 1 FROM pg_database WHERE datname='$DB_NAME'" )" != '1' ]
    then
        echo "Database does not exist, ignoring script"
        exit 0
    fi


    echo "Deleting web attachment when ir_attachment.location parameter is 's3' or 'swift'"

    psql << EOF

    DELETE FROM ir_attachment
    WHERE url like '/web/content/%'
    AND EXISTS (
        SELECT value
        FROM ir_config_parameter
        WHERE key = 'ir_attachment.location'
        AND value = 'azure'
    );

EOF

    echo "Setting ir_attachment.location parameter to 'db' if the current is 's3' or 'swift'"

    psql << EOF

    UPDATE ir_config_parameter
    SET value = 'db'
    WHERE key = 'ir_attachment.location'
    AND EXISTS (
        SELECT value
        FROM ir_config_parameter
        WHERE key = 'ir_attachment.location'
        AND value = 'azure'
    );

EOF

fi

# 001_dev_reset_users_pwd

if [ "$RUNNING_ENV" = "dev" ] ; then

    if [ "$( psql -tAc "SELECT 1 FROM pg_database WHERE datname='$DB_NAME'" )" != '1' ]
    then
        echo "Database does not exist, ignoring script"
        exit 0
    fi

    echo "Setting users' passwords to their usernames."

    psql << EOF

    UPDATE res_users SET password = login
    FROM (SELECT count(key) as done
          FROM ir_config_parameter
          WHERE key = 'dev.password.reset') params
    WHERE params.done = 0;

    INSERT INTO ir_config_parameter (key, value, create_uid, write_uid, create_date, write_date)
    VALUES ('dev.password.reset', 1, 1, 1, now(), now())
    ON CONFLICT DO NOTHING;

EOF

fi


